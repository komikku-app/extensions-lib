package eu.kanade.tachiyomi.source.online

import eu.kanade.tachiyomi.network.NetworkHelper
import eu.kanade.tachiyomi.source.CatalogueSource
import eu.kanade.tachiyomi.source.model.*
import okhttp3.Headers
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.Response
import rx.Observable

/**
 * A simple implementation for sources from a website.
 */
@Suppress("unused", "UnusedReceiverParameter", "UNUSED_PARAMETER")
abstract class HttpSource : CatalogueSource {

    /**
     * Network service.
     */
    protected val network: NetworkHelper = throw Exception("Stub!")

    /**
     * Base url of the website without the trailing slash, like: http://mysite.com
     */
    abstract val baseUrl: String

    /**
     * Version id used to generate the source id. If the site completely changes and urls are
     * incompatible, you may increase this value and it'll be considered as a new source.
     */
    open val versionId: Int = throw Exception("Stub!")

    /**
     * ID of the source. By default it uses a generated id using the first 16 characters (64 bits)
     * of the MD5 of the string `"${name.lowercase()}/$lang/$versionId"`.
     *
     * The ID is generated by the [generateId] function, which can be reused if needed
     * to generate outdated IDs for cases where the source name or language needs to
     * be changed but migrations can be avoided.
     *
     * Note: the generated ID sets the sign bit to `0`.
     */
    @Suppress("KDocUnresolvedReference")
    override val id: Long = throw Exception("Stub!")

    /**
     * Headers used for requests.
     */
    val headers: Headers = throw Exception("Stub!")

    /**
     * Default network client for doing requests.
     */
    open val client: OkHttpClient = throw Exception("Stub!")

    /**
     * Headers builder for requests. Implementations can override this method for custom headers.
     */
    protected open fun headersBuilder(): Headers.Builder {
        throw Exception("Stub!")
    }

    /**
     * Visible name of the source.
     */
    override fun toString() = throw Exception("Stub!")

    /**
     * Get a page with a list of manga.
     * Normally it's not needed to override this method.
     *
     * @since extensions-lib 1.5
     * @param page the page number to retrieve.
     */
    override suspend fun getPopularManga(page: Int): MangasPage {
        throw Exception("Stub!")
    }

    /**
     * Returns an observable containing a page with a list of manga.
     * Normally it's not needed to override this method.
     *
     * @param page the page number to retrieve.
     */
    @Deprecated("Use the non-RxJava API instead", replaceWith = ReplaceWith("getPopularManga(page)"))
    open fun fetchPopularManga(page: Int): Observable<MangasPage> {
        throw Exception("Stub!")
    }

    /**
     * Returns the request for the popular manga given the page.
     *
     * @param page the page number to retrieve.
     */
    protected abstract fun popularMangaRequest(page: Int): Request

    /**
     * Parses the response from the site and returns a [MangasPage] object.
     *
     * @param response the response from the site.
     */
    protected abstract fun popularMangaParse(response: Response): MangasPage

    /**
     * Get a page with a list of manga.
     * Normally it's not needed to override this method.
     *
     * @since extensions-lib 1.5
     * @param page the page number to retrieve.
     * @param query the search query.
     * @param filters the list of filters to apply.
     */
    override suspend fun getSearchManga(page: Int, query: String, filters: FilterList): MangasPage {
        throw Exception("Stub!")
    }

    /**
     * Returns an observable containing a page with a list of manga.
     * Normally it's not needed to override this method.
     *
     * @param page the page number to retrieve.
     * @param query the search query.
     * @param filters the list of filters to apply.
     */
    @Deprecated("Use the non-RxJava API instead", replaceWith = ReplaceWith("getSearchManga(page, query, filters)"))
    open fun fetchSearchManga(
        page: Int,
        query: String,
        filters: FilterList,
    ): Observable<MangasPage> {
        throw Exception("Stub!")
    }

    /**
     * Returns the request for the search manga given the page.
     *
     * @param page the page number to retrieve.
     * @param query the search query.
     * @param filters the list of filters to apply.
     */
    protected abstract fun searchMangaRequest(
        page: Int,
        query: String,
        filters: FilterList,
    ): Request

    /**
     * Parses the response from the site and returns a [MangasPage] object.
     *
     * @param response the response from the site.
     */
    protected abstract fun searchMangaParse(response: Response): MangasPage

    /**
     * Get a page with a list of latest manga updates.
     * Normally it's not needed to override this method.
     *
     * @since extensions-lib 1.5
     * @param page the page number to retrieve.
     */
    override suspend fun getLatestUpdates(page: Int): MangasPage {
        throw Exception("Stub!")
    }

    /**
     * Returns an observable containing a page with a list of latest manga updates.
     * Normally it's not needed to override this method.
     *
     * @param page the page number to retrieve.
     */
    @Deprecated("Use the non-RxJava API instead", replaceWith = ReplaceWith("getLatestUpdates(page)"))
    open fun fetchLatestUpdates(page: Int): Observable<MangasPage> {
        throw Exception("Stub!")
    }

    /**
     * Returns the request for latest manga given the page.
     *
     * @param page the page number to retrieve.
     */
    protected abstract fun latestUpdatesRequest(page: Int): Request

    /**
     * Parses the response from the site and returns a [MangasPage] object.
     *
     * @param response the response from the site.
     */
    protected abstract fun latestUpdatesParse(response: Response): MangasPage

    /**
     * Get the updated details for a manga.
     * Normally it's not needed to override this method.
     *
     * @since extensions-lib 1.4
     * @param manga the manga to update.
     * @return the updated manga.
     */
    override suspend fun getMangaDetails(manga: SManga): SManga {
        throw Exception("Stub!")
    }

    /**
     * Returns an observable with the updated details for a manga.
     * Normally it's not needed to override this method.
     *
     * @param manga the manga to be updated.
     */
    @Deprecated("Use the non-RxJava API instead", replaceWith = ReplaceWith("getMangaDetails(manga)"))
    open fun fetchMangaDetails(manga: SManga): Observable<SManga> {
        throw Exception("Stub!")
    }

    /**
     * Returns the request for the details of a manga. Override only if it's needed to change the
     * url, send different headers or request method like POST.
     * Normally it's not needed to override this method.
     *
     * @param manga the manga to be updated.
     */
    open fun mangaDetailsRequest(manga: SManga): Request {
        throw Exception("Stub!")
    }

    /**
     * Parses the response from the site and returns the details of a manga.
     *
     * @param response the response from the site.
     */
    protected abstract fun mangaDetailsParse(response: Response): SManga

    // KMK -->
    /**
     * Whether parsing related mangas in manga page or extension provide custom related mangas request.
     *
     * @default true
     * @since komikku/extensions-lib 1.6
     */
    override val supportsRelatedMangas: Boolean get() = true

    /**
     * Fetch related mangas for a manga from source/site.
     * Normally it's not needed to override this method.
     *
     * @since komikku/extensions-lib 1.6
     * @param manga the current manga to get related mangas.
     * @return the related mangas for the current manga.
     * @throws UnsupportedOperationException if a source doesn't support related mangas.
     */
    override suspend fun fetchRelatedMangaList(manga: SManga): List<SManga> {
        throw Exception("Stub!")
    }

    /**
     * Returns the request for get related manga list. Override only if it's needed to override
     * the url, send different headers or request method like POST.
     * Normally it's not needed to override this method.
     *
     * @since komikku/extensions-lib 1.6
     * @param manga the manga to look for related mangas.
     */
    protected open fun relatedMangaListRequest(manga: SManga): Request {
        throw Exception("Stub!")
    }

    /**
     * Parses the response from the site and returns a list of related mangas.
     *
     * @since komikku/extensions-lib 1.6
     * @param response the response from the site.
     */
    protected open fun relatedMangaListParse(response: Response): List<SManga> = throw Exception("Stub!")
    // KMK <--

    /**
     * Get all the available chapters for a manga.
     * Normally it's not needed to override this method.
     *
     * @param manga the manga to update.
     * @return the chapters for the manga.
     * @throws LicensedMangaChaptersException if a manga is licensed and therefore no chapters are available.
     */
    @Suppress("KDocUnresolvedReference")
    override suspend fun getChapterList(manga: SManga): List<SChapter> {
        throw Exception("Stub!")
    }

    /**
     * Returns an observable with the updated chapter list for a manga.
     * Normally it's not needed to override this method.
     *
     * @param manga the manga to look for chapters.
     */
    @Deprecated("Use the non-RxJava API instead", replaceWith = ReplaceWith("getChapterList(manga)"))
    open fun fetchChapterList(manga: SManga): Observable<List<SChapter>> {
        throw Exception("Stub!")
    }

    /**
     * Returns the request for updating the chapter list. Override only if it's needed to override
     * the url, send different headers or request method like POST.
     * Normally it's not needed to override this method.
     *
     * @param manga the manga to look for chapters.
     */
    protected open fun chapterListRequest(manga: SManga): Request {
        throw Exception("Stub!")
    }

    /**
     * Parses the response from the site and returns a list of chapters.
     *
     * @param response the response from the site.
     */
    protected abstract fun chapterListParse(response: Response): List<SChapter>

    /**
     * Parses the response from the site and returns a SChapter Object.
     *
     * @param response the response from the site.
     */
    protected open fun chapterPageParse(response: Response): SChapter = throw UnsupportedOperationException("Not used!")

    /**
     * Get the list of pages a chapter has. Pages should be returned
     * in the expected order; the index is ignored.
     * Normally it's not needed to override this method.
     *
     * @param chapter the chapter.
     * @return the pages for the chapter.
     */
    override suspend fun getPageList(chapter: SChapter): List<Page> {
        throw Exception("Stub!")
    }

    /**
     * Returns an observable with the page list for a chapter.
     * Normally it's not needed to override this method.
     *
     * @param chapter the chapter whose page list has to be fetched.
     */
    @Deprecated("Use the non-RxJava API instead", replaceWith = ReplaceWith("getPageList(chapter)"))
    open fun fetchPageList(chapter: SChapter): Observable<List<Page>> {
        throw Exception("Stub!")
    }

    /**
     * Returns the request for getting the page list. Override only if it's needed to override the
     * url, send different headers or request method like POST.
     * Normally it's not needed to override this method.
     *
     * @param chapter the chapter whose page list has to be fetched.
     */
    protected open fun pageListRequest(chapter: SChapter): Request {
        throw Exception("Stub!")
    }

    /**
     * Parses the response from the site and returns a list of pages.
     *
     * @param response the response from the site.
     */
    protected abstract fun pageListParse(response: Response): List<Page>

    /**
     * Returns the source url of the image.
     * Normally it's not needed to override this method.
     *
     * @since extensions-lib 1.5
     * @param page the page whose source image has to be fetched.
     */
    open suspend fun getImageUrl(page: Page): String {
        throw Exception("Stub!")
    }

    /**
     * Returns an observable with the page containing the source url of the image. If there's any
     * error, it will return null instead of throwing an exception.
     * Normally it's not needed to override this method.
     *
     * @param page the page whose source image has to be fetched.
     */
    @Deprecated("Use the non-RxJava API instead", replaceWith = ReplaceWith("getImageUrl(page)"))
    open fun fetchImageUrl(page: Page): Observable<String> {
        throw Exception("Stub!")
    }

    /**
     * Returns the request for getting the url to the source image. Override only if it's needed to
     * override the url, send different headers or request method like POST.
     * Normally it's not needed to override this method.
     *
     * @param page the chapter whose page list has to be fetched
     */
    protected open fun imageUrlRequest(page: Page): Request {
        throw Exception("Stub!")
    }

    /**
     * Parses the response from the site and returns the absolute url to the source image.
     *
     * @param response the response from the site.
     */
    protected abstract fun imageUrlParse(response: Response): String

    /**
     * Returns the response of the source image.
     * Normally it's not needed to override this method.
     *
     * @since extensions-lib 1.5
     * @param page the page whose source image has to be downloaded.
     */
    protected open suspend fun getImage(page: Page): Response {
        throw Exception("Stub!")
    }

    /**
     * Returns the request for getting the source image. Override only if it's needed to override
     * the url, send different headers or request method like POST.
     * Normally it's not needed to override this method.
     *
     * @param page the chapter whose page list has to be fetched
     */
    protected open fun imageRequest(page: Page): Request {
        throw Exception("Stub!")
    }

    /**
     * Assigns the url of the chapter without the scheme and domain. It saves some redundancy from
     * database and the urls could still work after a domain change.
     * Normally it's not needed to override this method.
     *
     * @param url the full url to the chapter.
     */
    fun SChapter.setUrlWithoutDomain(url: String) {
        throw Exception("Stub!")
    }

    /**
     * Assigns the url of the manga without the scheme and domain. It saves some redundancy from
     * database and the urls could still work after a domain change.
     * Normally it's not needed to override this method.
     *
     * @param url the full url to the manga.
     */
    fun SManga.setUrlWithoutDomain(url: String) {
        throw Exception("Stub!")
    }

    /**
     * Returns the url of the given string without the scheme and domain.
     * Normally it's not needed to override this method.
     *
     * @param orig the full url.
     */
    private fun getUrlWithoutDomain(orig: String): String {
        throw Exception("Stub!")
    }

    /**
     * Returns the url of the provided manga.
     * Normally it's not needed to override this method.
     *
     * @since extensions-lib 1.4
     * @param manga the manga
     * @return url of the manga
     */
    open fun getMangaUrl(manga: SManga): String {
        throw Exception("Stub!")
    }

    /**
     * Returns the url of the provided chapter.
     * Normally it's not needed to override this method.
     *
     * @since extensions-lib 1.4
     * @param chapter the chapter
     * @return url of the chapter
     */
    open fun getChapterUrl(chapter: SChapter): String {
        throw Exception("Stub!")
    }

    /**
     * Called before inserting a new chapter into database. Use it if you need to override chapter
     * fields, like the title or the chapter number. Do not change anything to [manga].
     *
     * @param chapter the chapter to be added.
     * @param manga the manga of the chapter.
     */
    open fun prepareNewChapter(chapter: SChapter, manga: SManga) {}

    /**
     * Returns the list of filters for the source.
     */
    override fun getFilterList(): FilterList {
        throw Exception("Stub!")
    }
}
